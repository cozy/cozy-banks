// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App route should be a function returning a route 1`] = `
<Routes>
  <Route
    element={<withClient(UserActionRequired) />}
  >
    <Route
      element={<withQuery(App) />}
      path="/"
    >
      <Route
        element={
          <Navigate
            replace={true}
            to="balances"
          />
        }
        index={true}
      />
      <Route
        path="balances"
      >
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <BalanceWithBanksJobs />
            </ScrollToTopOnMountWrapper>
          }
          index={true}
        />
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <Memo(Connect(RawBalanceDetailsPage)) />
            </ScrollToTopOnMountWrapper>
          }
          path="details"
        />
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <PlannedTransactionsPage
                emptyIcon="cozy"
              />
            </ScrollToTopOnMountWrapper>
          }
          path="future"
        />
        <Route
          element={<SetFilterAndRedirect />}
          path=":accountOrGroupId/:page"
        />
      </Route>
      <Route
        element={
          <Navigate
            replace={true}
            to="../analysis/categories"
          />
        }
        path="categories/*"
      />
      <Route
        element={
          <Navigate
            replace={true}
            to="../analysis/recurrence"
          />
        }
        path="recurrence/*"
      />
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <AnalysisPage />
          </ScrollToTopOnMountWrapper>
        }
        path="analysis"
      >
        <Route
          path="categories"
        >
          <Route
            element={
              <ScrollToTopOnMountWrapper>
                <Unknown />
              </ScrollToTopOnMountWrapper>
            }
            index={true}
          />
          <Route
            element={
              <ScrollToTopOnMountWrapper>
                <Unknown />
              </ScrollToTopOnMountWrapper>
            }
            path=":categoryName"
          />
          <Route
            element={
              <ScrollToTopOnMountWrapper>
                <Unknown />
              </ScrollToTopOnMountWrapper>
            }
            path=":categoryName/:subcategoryName"
          />
        </Route>
        <Route
          path="recurrence"
        >
          <Route
            element={
              <ScrollToTopOnMountWrapper>
                <withError(RecurrencesPage) />
              </ScrollToTopOnMountWrapper>
            }
            index={true}
          />
          <Route
            element={
              <ScrollToTopOnMountWrapper>
                <RecurrencePage />
              </ScrollToTopOnMountWrapper>
            }
            path=":bundleId"
          />
        </Route>
      </Route>
      <Route
        path="settings"
      >
        <Route
          element={
            <Navigate
              replace={true}
              to="../configuration/import"
            />
          }
          path="import"
        />
        <Route
          element={
            <Navigate
              replace={true}
              to="../export"
            />
          }
          path="configuration/export"
        />
        <Route
          element={<Export />}
          path="export"
        />
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <Settings
                delayContent={0}
              />
            </ScrollToTopOnMountWrapper>
          }
        >
          <Route
            element={<Unknown />}
            index={true}
          />
          <Route
            element={<Memo(AccountsSettings) />}
            path="accounts"
          />
          <Route
            element={<withQuery(withQuery(Groups)) />}
            path="groups"
          />
          <Route
            element={<TagsSettings />}
            path="tags"
          />
          <Route
            element={
              <OutletWrapper
                Component={[Function]}
              />
            }
            path="configuration"
          >
            <Route
              element={<Import />}
              path="import"
            />
          </Route>
        </Route>
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <Memo(NewGroupSettings) />
            </ScrollToTopOnMountWrapper>
          }
          path="groups/new"
        />
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <Memo(ExistingGroupSettings) />
            </ScrollToTopOnMountWrapper>
          }
          path="groups/:groupId"
        />
        <Route
          element={
            <Navigate
              replace={true}
              to="../accounts"
            />
          }
          path="accounts/:accountId"
        />
      </Route>
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <TagPage />
          </ScrollToTopOnMountWrapper>
        }
        path="tag/:tagId"
      />
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <Unknown />
          </ScrollToTopOnMountWrapper>
        }
        path="transfers"
      />
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <SearchPage />
          </ScrollToTopOnMountWrapper>
        }
        path="search"
      />
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <SearchPage />
          </ScrollToTopOnMountWrapper>
        }
        path="search/:search"
      />
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <DebugRecurrencePage />
          </ScrollToTopOnMountWrapper>
        }
        path="recurrencedebug"
      />
      <Route
        element={
          <Navigate
            replace={true}
            to="balances"
          />
        }
        path="*"
      />
    </Route>
  </Route>
</Routes>
`;

exports[`App route should have renderExtraRoutes 1`] = `
<Routes>
  <Route
    element={<withClient(UserActionRequired) />}
  >
    <Route
      element={<withQuery(App) />}
      path="/"
    >
      <Route
        element={
          <Navigate
            replace={true}
            to="balances"
          />
        }
        index={true}
      />
      <Route
        path="balances"
      >
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <BalanceWithBanksJobs />
            </ScrollToTopOnMountWrapper>
          }
          index={true}
        />
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <Memo(Connect(RawBalanceDetailsPage)) />
            </ScrollToTopOnMountWrapper>
          }
          path="details"
        />
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <PlannedTransactionsPage
                emptyIcon="cozy"
              />
            </ScrollToTopOnMountWrapper>
          }
          path="future"
        />
        <Route
          element={<SetFilterAndRedirect />}
          path=":accountOrGroupId/:page"
        />
      </Route>
      <Route
        element={
          <Navigate
            replace={true}
            to="../analysis/categories"
          />
        }
        path="categories/*"
      />
      <Route
        element={
          <Navigate
            replace={true}
            to="../analysis/recurrence"
          />
        }
        path="recurrence/*"
      />
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <AnalysisPage />
          </ScrollToTopOnMountWrapper>
        }
        path="analysis"
      >
        <Route
          path="categories"
        >
          <Route
            element={
              <ScrollToTopOnMountWrapper>
                <Unknown />
              </ScrollToTopOnMountWrapper>
            }
            index={true}
          />
          <Route
            element={
              <ScrollToTopOnMountWrapper>
                <Unknown />
              </ScrollToTopOnMountWrapper>
            }
            path=":categoryName"
          />
          <Route
            element={
              <ScrollToTopOnMountWrapper>
                <Unknown />
              </ScrollToTopOnMountWrapper>
            }
            path=":categoryName/:subcategoryName"
          />
        </Route>
        <Route
          path="recurrence"
        >
          <Route
            element={
              <ScrollToTopOnMountWrapper>
                <withError(RecurrencesPage) />
              </ScrollToTopOnMountWrapper>
            }
            index={true}
          />
          <Route
            element={
              <ScrollToTopOnMountWrapper>
                <RecurrencePage />
              </ScrollToTopOnMountWrapper>
            }
            path=":bundleId"
          />
        </Route>
      </Route>
      <Route
        path="settings"
      >
        <Route
          element={
            <Navigate
              replace={true}
              to="../configuration/import"
            />
          }
          path="import"
        />
        <Route
          element={
            <Navigate
              replace={true}
              to="../export"
            />
          }
          path="configuration/export"
        />
        <Route
          element={<Export />}
          path="export"
        />
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <Settings
                delayContent={0}
              />
            </ScrollToTopOnMountWrapper>
          }
        >
          <Route
            element={<Unknown />}
            index={true}
          />
          <Route
            element={<Memo(AccountsSettings) />}
            path="accounts"
          />
          <Route
            element={<withQuery(withQuery(Groups)) />}
            path="groups"
          />
          <Route
            element={<TagsSettings />}
            path="tags"
          />
          <Route
            element={
              <OutletWrapper
                Component={[Function]}
              />
            }
            path="configuration"
          >
            <Route
              element={<Import />}
              path="import"
            />
          </Route>
        </Route>
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <Memo(NewGroupSettings) />
            </ScrollToTopOnMountWrapper>
          }
          path="groups/new"
        />
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <Memo(ExistingGroupSettings) />
            </ScrollToTopOnMountWrapper>
          }
          path="groups/:groupId"
        />
        <Route
          element={
            <Navigate
              replace={true}
              to="../accounts"
            />
          }
          path="accounts/:accountId"
        />
      </Route>
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <TagPage />
          </ScrollToTopOnMountWrapper>
        }
        path="tag/:tagId"
      />
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <Unknown />
          </ScrollToTopOnMountWrapper>
        }
        path="transfers"
      />
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <SearchPage />
          </ScrollToTopOnMountWrapper>
        }
        path="search"
      />
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <SearchPage />
          </ScrollToTopOnMountWrapper>
        }
        path="search/:search"
      />
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <DebugRecurrencePage />
          </ScrollToTopOnMountWrapper>
        }
        path="recurrencedebug"
      />
      <Route
        element={<NewComponent />}
        path="extra-route"
      />
      <Route
        element={
          <Navigate
            replace={true}
            to="balances"
          />
        }
        path="*"
      />
    </Route>
  </Route>
</Routes>
`;

exports[`App route should have renderExtraRoutesOnly if condition is true 1`] = `
<Routes>
  <Route
    element={<withClient(UserActionRequired) />}
  >
    <Route
      element={<NewComponent />}
      path="extra-route-only"
    />
  </Route>
</Routes>
`;

exports[`App route should not have renderExtraRoutesOnly if condition is false 1`] = `
<Routes>
  <Route
    element={<withClient(UserActionRequired) />}
  >
    <Route
      element={<withQuery(App) />}
      path="/"
    >
      <Route
        element={
          <Navigate
            replace={true}
            to="balances"
          />
        }
        index={true}
      />
      <Route
        path="balances"
      >
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <BalanceWithBanksJobs />
            </ScrollToTopOnMountWrapper>
          }
          index={true}
        />
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <Memo(Connect(RawBalanceDetailsPage)) />
            </ScrollToTopOnMountWrapper>
          }
          path="details"
        />
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <PlannedTransactionsPage
                emptyIcon="cozy"
              />
            </ScrollToTopOnMountWrapper>
          }
          path="future"
        />
        <Route
          element={<SetFilterAndRedirect />}
          path=":accountOrGroupId/:page"
        />
      </Route>
      <Route
        element={
          <Navigate
            replace={true}
            to="../analysis/categories"
          />
        }
        path="categories/*"
      />
      <Route
        element={
          <Navigate
            replace={true}
            to="../analysis/recurrence"
          />
        }
        path="recurrence/*"
      />
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <AnalysisPage />
          </ScrollToTopOnMountWrapper>
        }
        path="analysis"
      >
        <Route
          path="categories"
        >
          <Route
            element={
              <ScrollToTopOnMountWrapper>
                <Unknown />
              </ScrollToTopOnMountWrapper>
            }
            index={true}
          />
          <Route
            element={
              <ScrollToTopOnMountWrapper>
                <Unknown />
              </ScrollToTopOnMountWrapper>
            }
            path=":categoryName"
          />
          <Route
            element={
              <ScrollToTopOnMountWrapper>
                <Unknown />
              </ScrollToTopOnMountWrapper>
            }
            path=":categoryName/:subcategoryName"
          />
        </Route>
        <Route
          path="recurrence"
        >
          <Route
            element={
              <ScrollToTopOnMountWrapper>
                <withError(RecurrencesPage) />
              </ScrollToTopOnMountWrapper>
            }
            index={true}
          />
          <Route
            element={
              <ScrollToTopOnMountWrapper>
                <RecurrencePage />
              </ScrollToTopOnMountWrapper>
            }
            path=":bundleId"
          />
        </Route>
      </Route>
      <Route
        path="settings"
      >
        <Route
          element={
            <Navigate
              replace={true}
              to="../configuration/import"
            />
          }
          path="import"
        />
        <Route
          element={
            <Navigate
              replace={true}
              to="../export"
            />
          }
          path="configuration/export"
        />
        <Route
          element={<Export />}
          path="export"
        />
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <Settings
                delayContent={0}
              />
            </ScrollToTopOnMountWrapper>
          }
        >
          <Route
            element={<Unknown />}
            index={true}
          />
          <Route
            element={<Memo(AccountsSettings) />}
            path="accounts"
          />
          <Route
            element={<withQuery(withQuery(Groups)) />}
            path="groups"
          />
          <Route
            element={<TagsSettings />}
            path="tags"
          />
          <Route
            element={
              <OutletWrapper
                Component={[Function]}
              />
            }
            path="configuration"
          >
            <Route
              element={<Import />}
              path="import"
            />
          </Route>
        </Route>
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <Memo(NewGroupSettings) />
            </ScrollToTopOnMountWrapper>
          }
          path="groups/new"
        />
        <Route
          element={
            <ScrollToTopOnMountWrapper>
              <Memo(ExistingGroupSettings) />
            </ScrollToTopOnMountWrapper>
          }
          path="groups/:groupId"
        />
        <Route
          element={
            <Navigate
              replace={true}
              to="../accounts"
            />
          }
          path="accounts/:accountId"
        />
      </Route>
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <TagPage />
          </ScrollToTopOnMountWrapper>
        }
        path="tag/:tagId"
      />
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <Unknown />
          </ScrollToTopOnMountWrapper>
        }
        path="transfers"
      />
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <SearchPage />
          </ScrollToTopOnMountWrapper>
        }
        path="search"
      />
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <SearchPage />
          </ScrollToTopOnMountWrapper>
        }
        path="search/:search"
      />
      <Route
        element={
          <ScrollToTopOnMountWrapper>
            <DebugRecurrencePage />
          </ScrollToTopOnMountWrapper>
        }
        path="recurrencedebug"
      />
      <Route
        element={
          <Navigate
            replace={true}
            to="balances"
          />
        }
        path="*"
      />
    </Route>
  </Route>
</Routes>
`;
